{"version":3,"sources":["utils/erc20.ts","hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","hooks/useTokenBalance.ts","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/EarnAPYCard.tsx","views/Home/Home.tsx"],"names":["getContract","provider","address","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","a","contract","methods","balanceOf","call","balance","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","CardValue","value","decimals","fontSize","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","color","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","div","pow","toNumber","style","lineHeight","useTokenBalance","ethereum","fetchBalance","CakeWalletBalance","cakeBalance","getCakeAddress","getBalanceNumber","StyledFarmStakingCard","styled","Card","Block","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","id","disabled","length","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","cakeABI","supply","fetchTotalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","opacity","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPYCard","farmsLP","useFarms","bnbPrice","usePriceBnbBusd","maxAPY","Number","MIN_VALUE","getHighestAPY","activeFarms","multiplier","calculateAPY","toLocaleString","slice","farmsToDisplay","cakePriceVsBNB","find","CAKE_POOL_PID","tokenPriceVsQuote","tokenAmount","lpTotalInQuoteToken","cakeRewardPerBlock","CAKE_PER_BLOCK","times","poolWeight","cakeRewardPerYear","BLOCKS_PER_YEAR","apy","quoteTokenSymbol","QuoteToken","BUSD","CAKE","dual","cakeApy","dualApy","rewardPerBlock","plus","animation","variant","justifyContent","exact","activeClassName","to","mt","Hero","Cards","BaseLayout","sm","Home","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/8.2f63e352.chunk.js","sourcesContent":["import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCream',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCream',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px' }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold fontSize={fontSize} color='#EAE2FC'>\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = () => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, '0x000000000000000000000000000000000000dEaD')\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = () => {\n  const TranslateString = useI18n()\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={getBalanceNumber(cakeBalance)} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/cake-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n  border-radius: 6px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/cake.svg\" alt=\"Gelato logo\" width={64} height={64} />\r\n        <Block>\r\n          <CakeHarvestBalance />\r\n          <Label>{TranslateString(544, 'Gelato to Harvest')}</Label>\r\n        </Block>\r\n        <Block>\r\n          <CakeWalletBalance />\r\n          <Label>{TranslateString(546, 'Gelato in Wallet')}</Label>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              fullWidth\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting Gelato')\r\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport { CAKE_PER_BLOCK } from 'config'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\n\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  border-radius: 6px;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n  padding: 10px;\r\n  background: #850085;\r\n  border: 1px solid #464549;\r\n  border-radius: 3px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getCakeAddress())\r\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - getBalanceNumber(burnedBalance) : 0\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(534, 'Gelato Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"16px\" style={{opacity: 0.8, color: '#EAE2FC'}}>{TranslateString(536, 'Total Gelato Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"18px\" value={cakeSupply} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"16px\" style={{opacity: 0.8, color: '#EAE2FC'}}>{TranslateString(538, 'Total Gelato Burned')}</Text>\r\n          <CardValue fontSize=\"18px\" value={getBalanceNumber(burnedBalance)} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"16px\" style={{opacity: 0.8, color: '#EAE2FC'}}>{TranslateString(540, 'New Gelato/block')}</Text>\r\n          <CardValue fontSize=\"18px\" decimals={2} value={4} />\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React, { useCallback, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\nimport useI18n from 'hooks/useI18n'\r\nimport BigNumber from 'bignumber.js'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport { useFarms, usePriceBnbBusd } from 'state/hooks'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n  border-radius: 6px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst EarnAPYCard = () => {\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const bnbPrice = usePriceBnbBusd()\r\n\r\n  const maxAPY = useRef(Number.MIN_VALUE)\r\n\r\n  const getHighestAPY = () => {\r\n    const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\r\n\r\n    calculateAPY(activeFarms)\r\n\r\n    return (maxAPY.current * 100).toLocaleString('en-US').slice(0, -1)\r\n  }\r\n\r\n  const calculateAPY = useCallback(\r\n    (farmsToDisplay) => {\r\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n\r\n      farmsToDisplay.map((farm) => {\r\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n          return farm\r\n        }\r\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD) {\r\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\r\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\r\n        } else if (farm.dual) {\r\n          const cakeApy =\r\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\r\n          const dualApy =\r\n            farm.tokenPriceVsQuote &&\r\n            new BigNumber(farm.tokenPriceVsQuote)\r\n              .times(farm.dual.rewardPerBlock)\r\n              .times(BLOCKS_PER_YEAR)\r\n              .div(farm.lpTotalInQuoteToken)\r\n\r\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\r\n        }\r\n\r\n        if (maxAPY.current < apy.toNumber()) maxAPY.current = apy.toNumber()\r\n\r\n        return apy\r\n      })\r\n    },\r\n    [bnbPrice, farmsLP],\r\n  )\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading color=\"contrast\" size=\"lg\">\r\n          Earn up to\r\n        </Heading>\r\n        <CardMidContent color=\"#7645d9\">\r\n          {getHighestAPY() ? (\r\n            `${getHighestAPY()}% ${TranslateString(736, 'APY')}`\r\n          ) : (\r\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\r\n          )}\r\n        </CardMidContent>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Heading color=\"contrast\" size=\"lg\">\r\n            in Farms\r\n          </Heading>\r\n          <NavLink exact activeClassName=\"active\" to=\"/farms\">\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </NavLink>\r\n        </Flex>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAPYCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\r\nimport CakeStats from 'views/Home/components/CakeStats'\r\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\r\nimport EarnAPYCard from 'views/Home/components/EarnAPYCard'\r\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-image: url('/images/pan-bg-mobile.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst CTACards = styled(BaseLayout)`\r\n  align-items: start;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\r\n          {TranslateString(576, 'IceCreamSwap')}\r\n        </Heading>\r\n        <Text style={{color: '#e901e9'}}>{TranslateString(579, '🍦 Creamy & Delicious AMM, Vault & YieldFarming on Binance Smart Chain.🍦')}</Text>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          <CakeStats />\r\n          <EarnAPYCard />\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}